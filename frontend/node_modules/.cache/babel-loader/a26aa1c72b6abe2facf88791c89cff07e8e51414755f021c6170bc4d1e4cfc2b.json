{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = \"http://localhost:5000\"; // Cambia esto al URL de tu backend en producción\nexport const getRecommendations = async referenceTime => {\n  try {\n    const response = await fetch(`${BASE_URL}/recommend_recipes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        reference_time: referenceTime\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching recommendations:\", error);\n    throw error;\n  }\n};\nexport const healthCheck = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/health`);\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error performing health check:\", error);\n    throw error;\n  }\n};\nconst instance = axios.create({\n  baseURL: 'http://localhost:5000',\n  // Cambia si usas otro puerto\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport default instance;","map":{"version":3,"names":["axios","BASE_URL","getRecommendations","referenceTime","response","fetch","method","headers","body","JSON","stringify","reference_time","ok","Error","status","json","error","console","healthCheck","instance","create","baseURL"],"sources":["C:/Users/Jhon/Documents/8vo/Aplicaciones/proyecto/programa/project-root/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n\r\nconst BASE_URL = \"http://localhost:5000\"; // Cambia esto al URL de tu backend en producción\r\nexport const getRecommendations = async (referenceTime) => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/recommend_recipes`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ reference_time: referenceTime }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`Error: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Error fetching recommendations:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  export const healthCheck = async () => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/health`);\r\n      if (!response.ok) {\r\n        throw new Error(`Error: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Error performing health check:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:5000', // Cambia si usas otro puerto\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n  \r\nexport default instance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,QAAQ,GAAG,uBAAuB,CAAC,CAAC;AAC1C,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,aAAa,IAAK;EACvD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,oBAAoB,EAAE;MAC5DK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,cAAc,EAAER;MAAc,CAAC;IACxD,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,UAAUT,QAAQ,CAACU,MAAM,EAAE,CAAC;IAC9C;IACA,OAAO,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,SAAS,CAAC;IAClD,IAAI,CAACG,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,UAAUT,QAAQ,CAACU,MAAM,EAAE,CAAC;IAC9C;IACA,OAAO,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;AAEH,MAAMG,QAAQ,GAAGnB,KAAK,CAACoB,MAAM,CAAC;EAC1BC,OAAO,EAAE,uBAAuB;EAAE;EAClCd,OAAO,EAAE;IAAE,cAAc,EAAE;EAAmB;AAChD,CAAC,CAAC;AAEJ,eAAeY,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}